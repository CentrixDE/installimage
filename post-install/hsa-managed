#!/bin/bash


NEW_HNAME="$(hostname -f)"
NEW_ADDRESS=$(/sbin/ifconfig eth0 | grep "inet addr:" | head -1 | awk '{print $2}'| cut -d: -f2)
NEW_DC="$(hostname -f | cut -d. -f2)"

if echo $NEW_DC | grep -Eq 'cpt[1234]|jnb[12]'; then
  OLD_ADDRESS="41.203.16.240"
  OLD_HNAME="masterbuild.jnb2.host-h.net"
  OLD_DOMAIN="jnb2.host-h.net"
  OLD_SHNAME="masterbuild"
elif echo $NEW_DC | grep -Eq 'nur4|flk1'; then
  OLD_ADDRESS="78.46.4.57"
  OLD_HNAME="masterbuild.nur4.host-h.net"
  OLD_DOMAIN="nur4.host-h.net"
  OLD_SHNAME="masterbuild"
fi



echo ""
echo "==============================================================="
echo ""
echo "Press any key to edit the new IP and hostname:"
echo ""
echo -e "  Hostname: ... old=$OLD_HNAME \t=>\t new=$NEW_HNAME"
echo -e "  IP: ......... old=$OLD_ADDRESS \t\t=>\t new=$NEW_ADDRESS"
echo "  "

X=""
for i in $(seq 1 10) ; do
  echo -n "."
  read -n1 -t1 X
  [ "$X" ] && break
done
echo
if [ "$X" ] ; then
  echo -n "Enter hostname: "   ; read NEW_HNAME
  echo -n "Enter IP address: " ; read NEW_ADDRESS
fi
echo

NEW_SHNAME="$(echo $NEW_HNAME | cut -d. -f1)"



echo "...Updating /etc/hosts"
cp /etc/hosts /etc/hosts.bak
sed -i -e "s/$OLD_ADDRESS/$NEW_ADDRESS/g" /etc/hosts

echo "...Updating httpd.conf"
cp /etc/apache/httpd.conf /etc/apache/httpd.conf.bak
sed -i -e "s/$OLD_ADDRESS/$NEW_ADDRESS/g" /etc/apache/httpd.conf

echo "...Updating httpd.conf.template"
cp /etc/apache/httpd.conf.template /etc/apache/httpd.conf.template.bak
sed -i -e "s:$OLD_ADDRESS:$NEW_ADDRESS:" /etc/apache/httpd.conf.template

echo "...Updating /etc/resolv.conf"
cp /etc/resolv.conf /etc/resolv.conf.bak
sed -i -e "s:$OLD_ADDRESS:$NEW_ADDRESS:" /etc/resolv.conf

if echo "$NEW_ADDRESS" | grep '^192\.168\.'; then
	echo "...Adding private network rules to hos_iptables.post"
	cat << EOF > /etc/hos_iptables.post
iptables -I bad-ip -s 192.168.0.0/23 -j RETURN # Durbanville office
iptables -I bad-ip -s 192.168.2.0/24 -j RETURN # Newlands office
iptables -I bad-ip -s 192.168.4.0/24 -j RETURN # JNB office
EOF
	chmod +x /etc/hos_iptables.post
	sed -i -e 's,^exit 0,/usr/local/hetzner/bin/rc.iptables\n\nexit 0,' /etc/hos_iptables.post
fi

echo "...Updating httpd.conf"
cp /etc/apache/httpd.conf /etc/apache/httpd.conf.bak
sed -i -e "s:$OLD_HNAME:$NEW_HNAME:" /etc/apache/httpd.conf

echo "...Activating new hostname"
/etc/init.d/hostname.sh

echo "...Updating exim4.conf.local"
sed -i -e "s:$OLD_HNAME:$NEW_HNAME:" /etc/exim4/exim4.conf.local
echo "--------------"

echo "...Updating /etc/hostname"
cp /etc/hostname /etc/hostname.bak
sed -i -e "s:$OLD_HNAME:$NEW_HNAME:" /etc/hostname

echo "...Updating /etc/hosts"
cp /etc/hosts /etc/hosts.bak
sed -i -e "s:$OLD_HNAME:$NEW_HNAME:" /etc/hosts

echo "...Updating /etc/mailname"
cp /etc/mailname /etc/mailname.bak
sed -i -e "s:$OLD_HNAME:$NEW_HNAME:" /etc/mailname

echo "...Removing /etc/host_type"
rm -rf /etc/host_type

#echo "...Tripwire config"
#echo "Please enter Tripwire Site passphrase: " 
#read twpass 
#/usr/sbin/twadmin -m G -S /etc/tripwire/site.key -Q $twpass
#echo "... Reconfiguring new passphrase"
#/usr/sbin/dpkg-reconfigure tripwire

#Kerberos
echo "...Installing kerberos host keytab"
#Need to create a new tempuser with key auth to run script on master kdc host
#/usr/sbin/useradd -m -d /home/kdcadd -s /bin/bash -e '' kdcadd
#ssh-keygen -t dsa -P "" -f .ssh/id_dsa
#ssh-copy-id -i .ssh/id_dsa.pub kdcadd@kdc1.cpt1.host-h.net
echo "============== Kerberos key gen ================"
touch /etc/krb5.keytab
chmod 600 /etc/krb5.keytab
su kdcadd -l -c "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no mkservtab@kdc2.cpt2.host-h.net mkservtab $NEW_HNAME" > /etc/krb5.keytab
echo "================================================"
userdel kdcadd
rm -rf /home/kdcadd
#cd /usr/local/hetzner/_inst/kerberos
#sh install

echo "...Updating /etc/fstab"
rm /etc/fstab

linktarget=$(basename "$(readlink /initrd.img)" | sed s,initrd.img-,,)

mdadm --examine --scan > /etc/mdadm/mdadm.conf 2>/dev/null
mdadm --examine --scan > /etc/mdadm/generated.conf 2>/dev/null

update-initramfs -d -k $linktarget
update-initramfs -c -k $linktarget

boot_device=$(mount | awk '$3 == "/boot" {print $1}')
cat << EOF > /etc/fstab
proc            	/proc           proc    defaults        0       0
/dev/mapper/vg-root 	/		ext4 	defaults,usrjquota=aquota.user,jqfmt=vfsv0,errors=remount-ro 0       1
${boot_device}     	/boot		ext3    defaults        0       2
/dev/mapper/vg-tmp 	/tmp		ext4    defaults        0       0
/dev/mapper/vg-usr 	/usr        	ext4	defaults,usrjquota=aquota.user,jqfmt=vfsv0       0       0
/dev/mapper/vg-usrhome	/usr/home       ext4	defaults,usrjquota=aquota.user,jqfmt=vfsv0       0       0
/dev/mapper/vg-usrwww	/usr/www        ext4	defaults,usrjquota=aquota.user,jqfmt=vfsv0       0       0
/dev/mapper/vg-var	/var    	ext4    defaults	0       0
/dev/mapper/vg-vartmp	/var/tmp        ext4    defaults	0       0
/dev/mapper/vg-swap	none            swap    sw	0       0
EOF

echo "...Disabling count- and interval-based fsck"
for fsname in root tmp usr usrhome var vartmp; do
	/sbin/tune2fs -c 0 -i 0 /dev/mapper/vg-$fsname >/dev/null
done

#echo ""
echo ""
#WK/SB/WB - Removing this because we now install the rescue system udev rules
#rm -f /etc/udev/rules.d/*-net.rules

### GRUB setup is already done by installimage

#for component_device in ${boot_device} $(mdadm --query --detail /dev/md0 2>/dev/null | awk '$7 ~ /\/dev\/[sdv]d[a-z][0-9]/ {gsub(/[0-9]*$/, "", $7); print $7}'); do
#	/usr/sbin/grub --batch --no-floppy <<EOF
#device (hd0) ${component_device}
#root (hd0,0)
#setup (hd0)
#quit
#EOF
#done

if echo $NEW_HNAME | grep -Eq '\.(cpt[1234]|jnb[12]|nur4|flk1)\.'; then
	geo_domain=$(echo $NEW_HNAME  | awk -F \. '{print $2}').host-h.net
elif echo $NEW_HNAME | grep -Eq '\.(dur1\.|hetzner\.africa)'; then
	geo_domain=cpt1.host-h.net
else
	geo_domain=""
fi

#AT the end of it all, we should run an aptitude upgrade to make sure all packages are fresh

echo "=> Upgrading APT packages ..."
/usr/local/bin/aptitude_upgrade

echo "Cleaning up local puppet install"
find /var/lib/puppet/clientbucket -type f -delete
find /var/lib/puppet/ssl -type f -name 'master*' -delete

echo "Generating host certificate for puppet via Certmeister"
/usr/local/bin/certmeister-client create /var/lib/puppet/ssl/private_keys/"$NEW_HNAME".pem /var/lib/puppet/ssl/certs/"$NEW_HNAME".pem

echo "Removing uptrack uuid file"
rm -f /var/lib/uptrack/uuid

if echo $NEW_HNAME | grep -q backup; then
  echo  "Installing needed entries for ftpbackupserver.. (y/n)"
  read ans
  if [ "$ans" == "y" ];then
    echo "creating ftpbackupserver now"
    mkdir -p /ftpbackup
    echo "/dev/mapper/vg-bak                /ftpbackup            ext4        defaults,usrquota        0       0" >> /etc/fstab

    echo "add to konsoleh_genie database"
    PASSWD=$(grep -A 3 livedb.konsoleh.co.za  /usr/local/hetzner/bin/config/connections.yml | grep password| awk {'print $2'})
    MSQLT=$(/usr/bin/mysql -uhetzner -hlivedb.konsoleh.co.za -p$(echo $PASSWD) konsoleh_genie -s -N -e "SELECT ftpb_server, (total_space - used_space) / quota FROM ftp_backup_servers;" | cut -f1 | grep  $NEW_HNAME)

    if  [ "$(echo $MSQLT| grep -c $NEW_HNAME)" -eq 0 ] ;then
      /usr/bin/mysql -uhetzner -hlivedb.konsoleh.co.za -p$(echo $PASSWD) konsoleh_genie -e "INSERT INTO ftp_backup_servers (datacentre ,ftpb_server ,total_space ,used_space ,quota) values ('$NEW_DC' ,'$NEW_HNAME' ,'3000' ,'0' ,'50');"
    fi

  fi
fi

echo "...done"
echo ""
echo "==============================================================="

